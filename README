Rewrite of delta[1] which is based on the ddmin algorithm described in
[2].

The original delta algorithm considers first subsets and then their
complements. Both this implementation and the one from [1] skip the
subset step.

Any common lisp compiler should do but only sbcl has been
tested. There are two external dependencies:

 * osicat: http://common-lisp.net/project/osicat/
 * external-program: http://common-lisp.net/project/osicat/

Both libraries are available via quicklisp[3] and will be
automatically installed if `make run-delta-ql` is used (see below).

A sample makefile is provided that allows to switch back and forth
between multiple implementations of delta for testing purposes, namely
the common lisp implementation described herein and the one from [1]
(in perl).

In particular, with a shell inside a clone of this repository, as well
as sbcl and quicklisp installed, one can run

  make run-delta-ql

to compile the delta-lisp tool and use it to reduce the file ./input
under the constraint that ./test.sh returns zero. Where delta takes
its input and predicate from can be set on the command line or through
the makefile variables INPUT and SCRIPT as in

  make run-delta-ql INPUT=test-silly/input SCRIPT=test-silly/test.sh

The makefile is convenient for testing but by no means necessary in
order to use delta-lisp.

Each test consists of an input file named input and a script named
test.sh and resides in a separate subdirectory.

[1] http://delta.tigris.org/
[2] http://www.st.cs.uni-saarland.de/papers/tse2002/
[3] http://www.quicklisp.org/
