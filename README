Rewrite of delta[1] which is based on the ddmin algorithm described in
[2], extended to put asynchronous IO to use.

The original delta algorithm considers first subsets and then their
complements. Both this implementation and the one from [1] skip the
subset step.

Any common lisp compiler should do but only sbcl and ccl have been
tested. There are currently five external dependencies,

  https://common-lisp.net/project/alexandria/
  https://common-lisp.net/project/external-program/
  https://common-lisp.net/project/iterate/
  https://github.com/tpapp/let-plus
  https://github.com/keithj/getopt

and for tests additionally

  https://common-lisp.net/project/fiveam/

all of which can be installed, e.g., through quicklisp[3] via

  make install-dependencies-via-quicklisp

assuming that sbcl, ccl, or another lisp that supports `--load` is
installed. UIOP is also used; since it is shipped alongside ASDF-3, it
is not considered a real dependency, however.

A sample makefile is provided that allows for easy back-and-forth
switching between multiple implementations of delta, namely the common
lisp implementation described herein and the one from [1] (in
perl). With a shell inside a clone of this repository and sbcl
installed in a standard location (otherwise, `LISP` needs to be set
accordingly)

  make run-delta-lisp

can be used to to compile the delta-lisp tool and use it to reduce the
file ./input under the constraint that ./test.sh returns zero. Where
delta takes its input and predicate from can be set on the command
line or through the makefile variables INPUT and SCRIPT as in

  make run-delta-lisp \
    INPUT=test-silly/input \
    SCRIPT=test-silly/test.sh \
    FLAGS='--processes=4'

The makefile is convenient for testing but by no means necessary in
order to use delta-lisp (and thus neither is quicklisp).

Each test consists of an input file and a test script that returns
either 0 (to signal success) or anything else (to signal failure).

[1] http://delta.tigris.org/
[2] http://www.st.cs.uni-saarland.de/papers/tse2002/
[3] http://www.quicklisp.org/
